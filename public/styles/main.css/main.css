@charset "UTF-8";
/**{
    outline:1px solid #0002;
}

*/
h1 {
  display: flex;
  margin: auto;
  background-color: rgb(221, 221, 221);
  border: rgb(64, 64, 64) solid 1px;
  border-radius: 20px;
  margin-top: 50px;
  padding: 20px 150px 20px 150px;
}

p {
  text-align: left;
  line-height: 24px;
  color: black;
}

h1, h2 {
  text-align: center;
}

h4 {
  height: 50px;
}

.code-text {
  background-color: rgb(29, 29, 29);
  color: white;
  font-family: monospace;
  padding: 10px;
  border-radius: 10px;
}

.title-central {
  width: 100%;
}

.explanation {
  margin: auto;
  width: 600px;
  height: auto;
}

.demo-text {
  text-align: left;
  padding-top: 10px;
  padding: 20px;
  display: block;
  height: auto;
  min-height: 200px;
}

.step-by-step-text {
  padding-left: 100px;
  line-height: 30px;
  width: 70%;
}

.contents-list {
  padding-left: 100px;
}

.section-description {
  padding-left: 100px;
}

.highlighted-container {
  background: #FFC107;
}

li {
  text-align: left;
  padding: 3px;
}

.console {
  color: greenyellow;
}

.vari {
  color: red;
}

.constant-dec {
  color: rgb(32, 115, 247);
}

.let-dec {
  color: aqua;
}

.obj {
  color: rgb(255, 9, 255);
}

.clss {
  color: yellow;
}

.ths {
  color: rgb(0, 128, 255);
}

.new {
  color: rgb(226, 43, 43);
}

.strng {
  color: rgb(250, 250, 160);
}

.num {
  color: rgb(246, 255, 0);
}

.bool {
  color: rgb(255, 200, 97);
}

.constructor {
  color: rgb(64, 224, 115);
}

.centered-text {
  padding: 0px 30px 20px 50px;
}

.ifelse {
  color: rgb(253, 116, 221);
}

.switch {
  color: red;
}

.for {
  color: rgb(71, 205, 71);
}

.square-container1 {
  width: 200px;
}

.square-container {
  display: flex;
  width: 95%;
  border: rgb(64, 64, 64) solid 1px;
  border: 2px solid;
  height: 200px;
  margin: auto;
  background-color: rgb(153, 229, 175);
}

.square {
  height: 50px;
  width: 50px;
}

.square {
  background-color: rgb(0, 166, 255);
}

.square-2 {
  background-color: red;
}

.square-3 {
  background-color: green;
}

.square-4 {
  background-color: yellow;
}

.square-5 {
  background-color: black;
}

/*hover affect*/
.square-1:hover {
  transform: scale(1.5);
  cursor: pointer;
}

.wide-example {
  display: flex;
  flex-direction: column;
}

.btn-move {
  display: flex;
  align-self: center;
  cursor: pointer;
  height: 50px;
  width: 50px;
}
.btn-move:active + .square-10-move {
  animation: move-square 2s ease forwards;
}

@keyframes move-square {
  0% {
    transform: translateX(0);
  }
  50% {
    transform: translateX(1200px);
  }
  100% {
    transform: translateX(0);
  }
}
/*square 2 hovering and affecting square 3*/
.square-2 {
  cursor: pointer;
}
.square-2:hover + .square-3 {
  transform: scale(1.9);
}

.square-4 {
  cursor: pointer;
}
.square-4:active + .square-5 {
  transform: scale(0.1);
  transition: transform 4000ms;
}

.form__group input {
  border: 2px solid black;
  border-radius: 100rem;
  color: #6300a0;
  font-family: "Montserrat", sans-serif;
  font-size: 2.5rem;
  outline: none;
  padding: 0.5rem 1.5rem;
  margin: 20px;
  width: 50%;
  transition: background-color 500ms;
}
.form__group input:focus {
  border: 2px solid #6300a0;
}
.form__group input:not(:focus):invalid {
  background-color: #b20a37;
  border: 2px solid #b20a37;
  color: #fff;
}

.btn-container {
  width: 90%;
  display: flex;
  margin: auto;
  justify-content: center;
}

.btn {
  background-color: rgba(1, 28, 55, 0);
  border: 4px solid black;
  border-radius: 10rem;
  color: rgb(83, 224, 2);
  cursor: pointer;
  font-size: 3rem;
  overflow: hidden;
  padding: 1.85rem 3rem;
  position: relative;
  transition: transform 450ms, background-color 300ms 150ms;
}
.btn:hover {
  transform: scale(1.13);
  background-color: rgb(1, 28, 55);
}

.invert {
  background-color: #000000;
  color: #FFFFFF;
}

.example-container1 {
  display: flex;
  flex-wrap: wrap;
  background-color: white;
  width: 90%;
  min-height: 400px;
  height: auto;
  border: rgb(64, 64, 64) solid 1px;
  border: solid, 1px;
  border-radius: 25px;
  padding-bottom: 30px;
  margin: 10px auto 50px auto;
  justify-content: center;
}

.demo-wrapper {
  display: flex;
  justify-content: center;
  flex-direction: column;
  margin: 10px;
  text-align: center;
  border: solid, 1px;
  min-height: 350px;
  border-radius: 25px;
  width: 265px;
  background-color: rgb(225, 240, 253);
  margin: 50px auto 10 auto;
}

.demo-media {
  display: flex;
  justify-content: center;
  margin: auto;
  padding: 40px;
}

.demo-pic {
  display: flex;
  width: 80%;
}

.demo-gif {
  width: 75%;
  margin: auto;
}

body {
  display: flex;
  flex-direction: column;
  gap: 40px;
  margin: auto;
  width: 100%;
  font-family: Arial, Helvetica, sans-serif;
  background-color: grey;
}

body.invert {
  filter: invert(100%);
}

.section-1 {
  display: flex;
  flex-direction: column;
  justify-content: space-evenly;
  flex-wrap: wrap;
  width: 90%;
  min-height: 500px;
  height: auto;
  border: rgb(244, 94, 0) dashed 5px;
  background-color: rgb(221, 221, 221);
  border-radius: 20px;
  margin: 0px auto 0px auto;
  padding: 20px;
}

.image-container {
  display: flex;
}

.image-container2 {
  background-color: rgb(162, 162, 162);
  padding: 30px;
  margin: 20px;
  border-radius: 20px;
  height: auto;
}

img {
  border-radius: 15px;
}

.section-2 {
  display: flex;
  flex-direction: column;
  gap: 20px;
}

.topic-2-container {
  display: flex;
  flex-direction: column;
  gap: 20px;
}

.full-way {
  display: flex;
  justify-content: space-evenly;
  flex-wrap: wrap;
  height: auto;
}

/*map structure example */
/*$map: (
    key-01: value-01,
    key-02: value-02,
    key-03: value-03
); */
/* Accessing the value of a map is a bit different than the nth() function for lists. 
With maps, you need to call the map-get() function: */
/*$font-size: (logo:7rem, heading:5rem, project-heading:4rem, label:2rem);

.form{
    &__field {
        & label {
            font-size: map-get($font-size, label);
        }
    }
} */
/* map-get() requires two arguments: the first is the name of the map, 
and the second is the name of the key. The end result will still be 2rem 
compiled as the font size in the CSS: */
/*.form__field label {
    font-size: 2rem;
  }

*/
/* Let’s put our newly found map-making skills to the test and create a map named 
 $input-txt-palettes, which contains the color palettes for our text inputs. 
 Group the palettes by their state, and create a key for each pseudo-class:  active,  
 focus, and  invalid:  */
/*$colour-primary: #15DEA5;
$colour-secondary: #001534;
$colour-accent: #D6FFF5;
$colour-white: #fff;
$colour-invalid: #DB464B; */
/*Now you have keys, but they’re empty; they need values assigned. Fill the keys with your color palettes, which will require nesting another map for the colors within each of the keys.

That’s right, maps inside of maps */
/*

@mixin white-on-black {
    color: $color-secondary;
    background-color: $color-primary;
}

@mixin black-on-white {
    color: $color-primary;
    background-color:  $color-secondary;
}


.input__label{
    display:inline-block;
    width:30%;
    color:$color-secondary;
    background-color: $color-primary;
    border-radius: 20px;
        &:hover{
            @include black-on-white;

        &:active{
        &--2 {
        @include white-on-black;
        }
    }
}
}







.map-input-form{
    display:flex;
    flex-direction:column;
    gap:10px;
}

.map-input {
    background-color: $color-primary;
        &:focus{
            background-color: $color-valid
        }

}

*/
header {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  background-color: #FFFFFF;
  z-index: 999;
}

.script-container {
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
  justify-content: center;
  margin: auto;
  gap: 20px;
  border: 1px solid lightblue;
  border-radius: 20px;
  background-color: rgb(225, 222, 210);
  width: 100%;
  text-align: center;
  min-height: 300px;
}

main {
  opacity: 1;
  animation: fade-in 2.5s 1 linear;
}

.script-wrapper {
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  height: auto;
  min-height: 200px;
  width: 100%;
  height: fit-content;
  gap: 30px;
}

.script {
  width: 200px;
  min-height: 100px;
  height: auto;
  border-radius: 20px;
  background-color: lightskyblue;
  padding: 20px;
  margin: auto;
  line-height: 30px;
}

.script__output1 {
  background-color: white;
  height: 32px;
}

.script__description {
  padding: 20px;
  background-color: white;
  margin: 10px;
  margin-bottom: 40px;
  width: 370px;
  height: fit-content;
  border-radius: 20px;
  justify-content: space-evenly;
  box-shadow: 0 0 10px 2px rgb(169, 169, 169);
  transform: scale(1);
  transition: ease-in 200ms;
}
.script__description:hover {
  transition-duration: 300ms;
  scale: 1.02;
  cursor: pointer;
}

.script__description {
  background-color: #FFFFFF;
  color: #000000;
  transition: color 0.2s ease-out;
}

.script-wrapper-wrap {
  display: flex;
  flex-wrap: wrap;
  justify-content: space-evenly;
  margin: auto;
}

.contents-section {
  display: flex;
}

.container__1 {
  display: flex;
  flex-direction: column;
  justify-content: space-evenly;
  width: 100%;
}

.row {
  display: flex;
  flex-wrap: wrap;
  width: 100%;
  justify-content: space-evenly;
  height: auto;
}

.row2 {
  align-items: center;
}

.column {
  display: flex;
  flex-direction: column;
  height: auto;
}

.info-row {
  display: flex;
  flex-direction: row-reverse;
  margin: auto;
  flex-wrap: wrap;
  gap: 30px;
  height: auto;
}

.bin-link {
  margin: auto;
}

.key-info {
  background-color: yellow;
}

.small-container {
  box-sizing: border-box;
  margin-bottom: 20px;
}

/*# sourceMappingURL=main.css.map */
