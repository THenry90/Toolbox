/*map structure example */

/*$map: (
    key-01: value-01,
    key-02: value-02,
    key-03: value-03
); */

/* Accessing the value of a map is a bit different than the nth() function for lists. 
With maps, you need to call the map-get() function: */

/*$font-size: (logo:7rem, heading:5rem, project-heading:4rem, label:2rem);

.form{
    &__field {
        & label {
            font-size: map-get($font-size, label);
        }
    }
} */

/* map-get() requires two arguments: the first is the name of the map, 
and the second is the name of the key. The end result will still be 2rem 
compiled as the font size in the CSS: */

/*.form__field label {
    font-size: 2rem;
  }

*/
/* Let’s put our newly found map-making skills to the test and create a map named 
 $input-txt-palettes, which contains the color palettes for our text inputs. 
 Group the palettes by their state, and create a key for each pseudo-class:  active,  
 focus, and  invalid:  */

/*$colour-primary: #15DEA5;
$colour-secondary: #001534;
$colour-accent: #D6FFF5;
$colour-white: #fff;
$colour-invalid: #DB464B; */



/*Now you have keys, but they’re empty; they need values assigned. Fill the keys with your color palettes, which will require nesting another map for the colors within each of the keys.

That’s right, maps inside of maps */

$input-colour-primary: #15DEA5;
$input-colour-secondary: #001534;
$input-colour-accent: #D6FFF5;
$input-colour-white: #fff;
$input-colour-invalid: #DB464B;

$txt-input-palette: (
    active: (
        bg: $input-colour-primary,
        border: $input-colour-primary,
        txt: $input-colour-white,
    ),
    focus: (
        bg: $input-colour-primary,
        border: $input-colour-primary,
        txt: $input-colour-white,
    ),
    invalid: (
        bg: $input-colour-invalid,
        border: $input-colour-white,
        txt: $input-colour-white,
    )
);

/*

@mixin white-on-black {
    color: $color-secondary;
    background-color: $color-primary;
}

@mixin black-on-white {
    color: $color-primary;
    background-color:  $color-secondary;
}


.input__label{
    display:inline-block;
    width:30%;
    color:$color-secondary;
    background-color: $color-primary;
    border-radius: 20px;
        &:hover{
            @include black-on-white;
        
        &:active{
        &--2 {
        @include white-on-black;
        }
    }
}
}
    


          



.map-input-form{
    display:flex;
    flex-direction:column;
    gap:10px;
}

.map-input {
    background-color: $color-primary;
        &:focus{
            background-color: $color-valid
        }

}

*/